<?php

namespace App\Entity;

use ApiPlatform\Core\Annotation\ApiFilter;
use ApiPlatform\Core\Annotation\ApiResource;
use ApiPlatform\Core\Bridge\Doctrine\Orm\Filter\OrderFilter;
use ApiPlatform\Core\Bridge\Doctrine\Orm\Filter\SearchFilter;
use ApiPlatform\Core\Serializer\Filter\PropertyFilter;
use Doctrine\ORM\Mapping as ORM;
use Ramsey\Uuid\UuidInterface;
use App\Controller\Api\ModController;

/**
 * @ApiResource(
 *     itemOperations={
 *          "get",
 *          "patch",
 *          "upload_files"={
 *              "method"="PUT",
 *              "path"="/mods/{id}/upload-file",
 *              "controller"=ModController::class,
 *              "deserialize"=false,
 *          }
 *     }
 * )
 * @ApiFilter(PropertyFilter::class, arguments={"parameterName": "props" })
 * @ApiFilter(SearchFilter::class, properties={"id": "exact", "name": "ipartial"})
 * @ApiFilter(OrderFilter::class, properties={"name"})
 *
 * @ORM\Entity(repositoryClass="App\Repository\ModRepository")
 * @ORM\Table(name="factorio_mod")
 */
class Mod
{
    /**
     * An autogenerated unique ID for the product
     *
     * @var UuidInterface $id
     * @ORM\Id()
     * @ORM\Column(type="uuid", unique=true)
     * @ORM\GeneratedValue(strategy="CUSTOM")
     * @ORM\CustomIdGenerator(class="Ramsey\Uuid\Doctrine\UuidGenerator")
     */
    private $id;

    /**
     * The name of the mod
     *
     * @var string $name
     * @ORM\Column(type="string", length=255)
     */
    private $name;

    /**
     * The description of the mod
     *
     * @var string|null $description
     *
     * @ORM\Column(type="text", nullable=true)
     */
    private $description = null;

    /**
     * The official Website URL
     *
     * @var string|null $websiteUrl
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    private $websiteUrl = null;

    /**
     * The source URL
     *
     * @var string|null $sourceUrl
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    private $sourceUrl;

    public function getId(): ?UuidInterface
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;

        return $this;
    }

    public function getWebsiteUrl(): ?string
    {
        return $this->websiteUrl;
    }

    public function setWebsiteUrl(?string $websiteUrl): self
    {
        $this->websiteUrl = $websiteUrl;

        return $this;
    }

    public function getSourceUrl(): ?string
    {
        return $this->sourceUrl;
    }

    public function setSourceUrl(?string $sourceUrl): self
    {
        $this->sourceUrl = $sourceUrl;

        return $this;
    }
}
