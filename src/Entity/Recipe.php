<?php

namespace App\Entity;

use ApiPlatform\Core\Annotation\ApiFilter;
use ApiPlatform\Core\Annotation\ApiProperty;
use ApiPlatform\Core\Annotation\ApiResource;
use ApiPlatform\Core\Bridge\Doctrine\Orm\Filter\SearchFilter;
use ApiPlatform\Core\Serializer\Filter\PropertyFilter;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Ramsey\Uuid\UuidInterface;
use ApiPlatform\Core\Bridge\Doctrine\Orm\Filter\OrderFilter;
use Symfony\Component\Serializer\Annotation\Groups;

/**
 * The recipe is an available craft in the game with a lot of information needed in it
 *
 * @ApiResource(
 *     itemOperations={
 *          "get"={"normalization"={"groups"={"recipe:read"}}},
 *          "patch",
 *          "delete"
 *     },
 *     collectionOperations={
 *          "get"={"maximum_items_per_page"=100000},
 *          "post",
 *     },
 *     attributes={"pagination_client_items_per_page"=true, "pagination_fetch_join_collection"=true}
 * )
 * @ApiFilter(PropertyFilter::class, arguments={"parameterName": "props" })
 * @ApiFilter(SearchFilter::class, properties={"id": "exact", "name": "ipartial", "type": "exact", "utility": "exact", "mod.id": "exact"})
 * @ApiFilter(OrderFilter::class, properties={"name", "type", "utility", "craftingTime"})
 * @ORM\Entity(repositoryClass="App\Repository\RecipeRepository")
 * @ORM\Table(name="factorio_recipe")
 */
class Recipe
{
    /**
     * An autogenerated unique ID for the recipe
     *
     * @var UuidInterface $id
     * @ORM\Id()
     * @ORM\Column(type="uuid", unique=true)
     * @ORM\GeneratedValue(strategy="CUSTOM")
     * @ORM\CustomIdGenerator(class="Ramsey\Uuid\Doctrine\UuidGenerator")
     * @Groups({"recipe:read"})
     */
    private $id;

    /**
     * The name of the recipe
     *
     * @var string $name
     * @ORM\Column(type="string", length=255)
     * @Groups({"component:read", "recipe:read"})
     */
    private $name;

    /**
     * @var string $slug The slug of the item
     * @ORM\Column(type="string", length=255, unique=true)
     * @Groups({"component:read", "item:read"})
     */
    private $slug = '';

    /**
     * The base crafting time for the recipe
     *
     * @var float
     * @ORM\Column(type="float")
     * @Groups({"recipe:read"})
     */
    private $craftingTime = 1;

    /**
     * The associated Mod
     *
     * @var Mod|null $mod
     *
     * @ORM\ManyToOne(targetEntity="App\Entity\Mod", cascade={"persist"})
     * @ORM\JoinColumn(name="mod_id", referencedColumnName="id")
     *
     * @ApiProperty(writableLink=true)
     * @Groups({"recipe:read"})
     */
    private $mod = null;

    public function getId()
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;

        if(empty($this->slug)){
            $this->setSlug(str_replace(' ', '-', strtolower($name)));
        }

        return $this;
    }

    public function getSlug(): ?string
    {
        return $this->slug;
    }

    public function setSlug(string $slug): void
    {
        $this->slug = $slug;
    }

    public function getCraftingTime(): ?float
    {
        return $this->craftingTime;
    }

    public function setCraftingTime(float $craftingTime): self
    {
        $this->craftingTime = $craftingTime;

        return $this;
    }

    public function getMod(): ?Mod
    {
        return $this->mod;
    }

    public function setMod(?Mod $mod): self
    {
        $this->mod = $mod;

        return $this;
    }
}
