<?php

namespace App\Entity;

use ApiPlatform\Core\Annotation\ApiFilter;
use ApiPlatform\Core\Annotation\ApiResource;
use ApiPlatform\Core\Bridge\Doctrine\Orm\Filter\SearchFilter;
use ApiPlatform\Core\Serializer\Filter\PropertyFilter;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Ramsey\Uuid\UuidInterface;
use ApiPlatform\Core\Bridge\Doctrine\Orm\Filter\OrderFilter;
use Symfony\Component\Serializer\Annotation\Groups;

/**
 * The product is an available craft in the game with a lot of information needed in it
 *
 * @ApiResource(
 *     itemOperations={
 *          "get"={"denormalization"={"groups"={"product:read"}}},
 *          "patch",
 *          "delete"
 *     },
 *     attributes={"pagination_client_items_per_page"=true}
 * )
 * @ApiFilter(PropertyFilter::class, arguments={"parameterName": "props" })
 * @ApiFilter(SearchFilter::class, properties={"id": "exact", "name": "ipartial", "type": "exact", "utility": "exact"})
 * @ApiFilter(OrderFilter::class, properties={"name", "type", "utility", "craftingTime"})
 * @ORM\Entity(repositoryClass="App\Repository\ProductRepository")
 */
class Product
{
    /**
     * An autogenerated unique ID for the product
     *
     * @var UuidInterface $id
     * @ORM\Id()
     * @ORM\Column(type="uuid", unique=true)
     * @ORM\GeneratedValue(strategy="CUSTOM")
     * @ORM\CustomIdGenerator(class="Ramsey\Uuid\Doctrine\UuidGenerator")
     */
    private $id;

    /**
     * The name of the product
     *
     * @var string $name
     * @ORM\Column(type="string", length=255)
     * @Groups({"component:write", "product:read"})
     */
    private $name;

    /**
     * The type of the product (in most case : item or fluid)
     *
     * In most case :
     * <ul>
     * <li>item</li>
     * <li>fluid</li>
     * </ul>
     *
     * @var string $type
     * @ORM\Column(type="string", length=255)
     * @Groups({"product:read"})
     */
    private $type;

    /**
     * What is the function of the product
     *
     * Used right now :
     * <ul>
     * <li>component</li>
     * <li>machine</li>
     * <li>transport</li>
     * <li>module-efficiency</li>
     * <li>module-productivity</li>
     * <li>module-speed</li>
     * </ul>
     *
     * @var string
     * @ORM\Column(type="string", length=255)
     * @Groups({"product:read"})
     */
    private $utility;

    /**
     * The base crafting time for the product
     *
     * @var float
     * @ORM\Column(type="float")
     * @Groups({"product:read"})
     */
    private $craftingTime = 1;

    /**
     * The number of output for the product
     * In most case, it will be 1
     *
     * @var int
     * @ORM\Column(type="integer")
     * @Groups({"product:read"})
     */
    private $output = 1;

    /**
     * Number of items moved per second (for transport items)
     *
     * @var int|null
     * @ORM\Column(type="integer", nullable=true)
     * @Groups({"product:read"})
     */
    private $itemPerSecond = null;

    /**
     * Crafting speed (for machine)
     *
     * @var float|null
     * @ORM\Column(type="float", nullable=true)
     * @Groups({"product:read"})
     */
    private $craftingSpeed = null;

    /**
     * @var float
     * @ORM\Column(type="float")
     * @Groups({"product:read"})
     */
    private $baseProductivity = 1;

    /**
     * Energy Consumption modifier for Modules (speed, efficiency and productivity)
     *
     * @var float|null
     * @ORM\Column(type="float", nullable=true)
     * @Groups({"product:read"})
     */
    private $energyConsumption = null;

    /**
     * Crafting speed modifier for Modules (speed and productivity)
     *
     * @var float|null
     * @ORM\Column(type="float", nullable=true)
     * @Groups({"product:read"})
     */
    private $speed = null;

    /**
     * Pollution modifier for Modules (efficiency and productivity)
     *
     * @var float|null
     * @ORM\Column(type="float", nullable=true)
     * @Groups({"product:read"})
     */
    private $polution = null;

    /**
     * Productivity modifier for Modules (productivity)
     *
     * @var float|null
     * @ORM\Column(type="float", nullable=true)
     * @Groups({"product:read"})
     */
    private $productivity = null;

    /**
     * @var ProductComponent[]
     * @Groups({"product:read"})
     * @ORM\OneToMany(targetEntity="App\Entity\ProductComponent", mappedBy="product", cascade={"persist", "remove"})
     */
    private $components;

    public function __construct()
    {
        $this->components = new ArrayCollection();
        $this->type = 'item';
        $this->utility = 'component';
    }

    public function getId(): ?UuidInterface
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;

        return $this;
    }

    public function getType(): ?string
    {
        return $this->type;
    }

    public function setType(string $type): self
    {
        $this->type = $type;

        return $this;
    }

    public function getUtility(): ?string
    {
        return $this->utility;
    }

    public function setUtility(string $utility): self
    {
        $this->utility = $utility;

        return $this;
    }

    public function getCraftingTime(): ?float
    {
        return $this->craftingTime;
    }

    public function setCraftingTime(float $craftingTime): self
    {
        $this->craftingTime = $craftingTime;

        return $this;
    }

    public function getBaseProductivity(): ?float
    {
        return $this->baseProductivity;
    }

    public function setBaseProductivity(float $baseProductivity): self
    {
        $this->baseProductivity = $baseProductivity;

        return $this;
    }

    public function getOutput(): ?int
    {
        return $this->output;
    }

    public function setOutput(int $output): self
    {
        $this->output = $output;

        return $this;
    }

    public function getItemPerSecond(): ?int
    {
        return $this->itemPerSecond;
    }

    public function setItemPerSecond(?int $itemPerSecond): self
    {
        $this->itemPerSecond = $itemPerSecond;

        return $this;
    }

    public function getCraftingSpeed(): ?float
    {
        return $this->craftingSpeed;
    }

    public function setCraftingSpeed(?float $craftingSpeed): self
    {
        $this->craftingSpeed = $craftingSpeed;

        return $this;
    }

    public function getEnergyConsumption(): ?float
    {
        return $this->energyConsumption;
    }

    public function setEnergyConsumption(?float $energyConsumption): self
    {
        $this->energyConsumption = $energyConsumption;

        return $this;
    }

    public function getSpeed(): ?float
    {
        return $this->speed;
    }

    public function setSpeed(?float $speed): self
    {
        $this->speed = $speed;

        return $this;
    }

    public function getPolution(): ?float
    {
        return $this->polution;
    }

    public function setPolution(?float $polution): self
    {
        $this->polution = $polution;

        return $this;
    }

    public function getProductivity()
    {
        return $this->productivity;
    }

    public function setProductivity($productivity): self
    {
        $this->productivity = $productivity;

        return $this;
    }

    /**
     * @return Collection|ProductComponent[]
     */
    public function getComponents(): Collection
    {
        return $this->components;
    }

    public function addComponent(ProductComponent $component): self
    {
        if (!$this->components->contains($component)) {
            $this->components[] = $component;
            $component->setProduct($this);
        }

        return $this;
    }

    public function removeComponent(ProductComponent $component): self
    {
        if ($this->components->contains($component)) {
            $this->components->removeElement($component);
            // set the owning side to null (unless already changed)
            if ($component->getProduct() === $this) {
                $component->setProduct(null);
            }
        }

        return $this;
    }
}
