<?php

namespace App\Entity;

use ApiPlatform\Core\Annotation\ApiFilter;
use ApiPlatform\Core\Annotation\ApiResource;
use ApiPlatform\Core\Bridge\Doctrine\Orm\Filter\SearchFilter;
use ApiPlatform\Core\Serializer\Filter\PropertyFilter;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Serializer\Annotation\Groups;
use Symfony\Component\Serializer\Annotation\MaxDepth;

/**
 * @ApiResource()
 * @ApiFilter(PropertyFilter::class, arguments={"parameterName": "props" })
 * @ApiFilter(SearchFilter::class, properties={"id": "exact", "product.id": "exact"})
 * @ORM\Entity(repositoryClass="App\Repository\ProductComponentRepository")
 * @ORM\Table(
 *    uniqueConstraints={
 *        @ORM\UniqueConstraint(name="product_component_uniq", columns={"product_id", "component_id"})
 *    }
 * )
 *
 */
class ProductComponent
{
    /**
     * An autogenerated unique ID for the product component
     *
     * @ORM\Id()
     * @ORM\GeneratedValue()
     * @ORM\Column(type="integer")
     */
    private $id;

    /**
     * The quantity of the product needed
     *
     * @var int
     * @ORM\Column(type="integer")
     */
    private $quantity = 1;

    /**
     * The product
     *
     * @var Product
     *
     * @ORM\ManyToOne(targetEntity="App\Entity\Product")
     * @ORM\JoinColumn(name="product_id", referencedColumnName="id")},
     */
    private $product;

    /**
     * The component
     *
     * @var Product
     *
     * @ORM\ManyToOne(targetEntity="App\Entity\Product")
     * @ORM\JoinColumn(name="component_id", referencedColumnName="id")},
     */
    private $component;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getQuantity(): ?int
    {
        return $this->quantity;
    }

    public function setQuantity(int $quantity): self
    {
        $this->quantity = $quantity;

        return $this;
    }

    public function getProduct(): ?Product
    {
        return $this->product;
    }


    public function setProduct(?Product $product): self
    {
        $this->product = $product;

        return $this;
    }

    public function getComponent(): ?Product
    {
        return $this->component;
    }

    public function setComponent(?Product $component): self
    {
        $this->component = $component;

        return $this;
    }
}
